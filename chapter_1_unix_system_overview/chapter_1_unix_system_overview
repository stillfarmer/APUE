functions

1. include <stdio.h>

    void perror(const char *msg);

2. include <string.h>

    char * strerror(int errnum);



1.2 UNIX Arhitecuture

    1.2.1 In a strict sense, an operating system can be defined as the software:

	(1) control the hardware resources.
	(2) provide an environment under which programs can run.

    1.2.2 system calls: the interface to the kernel

1.4 Files and Dirctories

    1.4.1 File system

		The attributes of a file:

		(1) type of file -- regular file, directory.
		(2) size of file.
		(3) owner of file.
		(4) permissions for the file.
		
		THe stat & fstat funcs returns a structure of info containing all the attributes of a file.

    1.4.2 Filename

	    (1) two characters: slash (/), null, can not appear in a filename;

	1.4.3 Pathname
	    
		(1) absolute pathname: a pathname that begins with a slash;
		(2) relative pathname;

    1.4.4 Working Directory

	    (1) chdir: a process can change its working directory.

    1.4.5 Home Directory

	    
1.5 Input & Output

	1.5.1 File Descriptors
        (1) normally small non-negative integers.
	    (2) the kernel use it  to identify the files being accessed by a particular process.
	
	1.5.2 Standard Input, Standard Output, Standard Error.

	    (1) By convention, all shells opens three descriptors whenever a new program is run:
		(2) If nothing is done, all three are connected to the terminal.


	1.5.4 Unbuffered I/O

		(1) provided by func: open, close.
		                      read, write.
							  close.
            These func work with fds.


    1.5.5 Standard I/O
		
		(1) provide a buffered interface to the unbuffered I/O funcs.


1.6 Programs and Processes

	1.6.1 Program

		(1) an executable file residing on disk.
		(2) a program is read into memory and is executed by the kernel as a result of one 
		    the six exec funcs.

	1.6.2 Processes

		(1) a executing instance of a program.
		(2) processID is always non-negative.

	1.6.3 Process Control

	    Three primary funcs for process control:

		(1) fork;
		(2) exec;
		(3) waitpid;

		Ctrl + D is the default end-of-file charactor.


	1.6.4 Threads and Thread IDs

		All the threads within a process share:

		(1) the same address space;
		(2) fds;
		(3) stacks;
		(4) process-related attributes;

		Thread IDs are local to a process;


1.7 Error Handling
    
	see header file in linux_include_12.04, errno-base.h, errno.h.

	see error_test.c

	2 problems to resolve.


1.8 User ID & Group ID


1.9 Signals

    1.9.1 Three choices for dealing with a signal.

		(1) ignore. 
		(2) let the default action occor.
		(3) provide a func that is called when signal occurs(called "catching the signal").


	1.9.2 kill func

	    We call this func to send a signal to another process.

		Naturally, there are limitations: we have to be the owner of the other process(or the superuser) to be able to send it a signal.


1.10 Time values

	1.10.1 Unix systems have maitained two different time values:

		(1) Calendar time: 

		(2) Process time (CPU time), measures the cpu resources used by a process. Process time is measured in clock ticks, which 
		    have been 50, 60 or 100 ticks per second.

	1.10.2 Measures the execution time of a process.

		(1) Clock time, the amount of time the process takes to run, its value depends on the number of other software.
		    Whenever 



	


